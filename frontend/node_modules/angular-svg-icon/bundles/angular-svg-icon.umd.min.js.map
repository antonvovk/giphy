{"version":3,"sources":["ng://angular-svg-icon/lib/svg-loader.ts","ng://angular-svg-icon/lib/svg-icon-registry.service.ts","ng://angular-svg-icon/lib/svg-icon.component.ts","ng://angular-svg-icon/lib/angular-svg-icon.module.ts"],"names":["SvgHttpLoader","http","_this","_super","call","this","__extends","prototype","getSvg","url","get","responseType","Injectable","HttpClient","SvgLoader","SERVER_URL","InjectionToken","SvgIconRegistryService","loader","platformId","serverUrl","_document","iconsByUrl","Map","iconsLoadingByUrl","document","addSvg","name","data","has","div","createElement","innerHTML","svg","querySelector","set","loadSvg","match","observableOf","o","pipe","map","tap","catchError","err","console","error","observableThrowError","finalize","delete","share","getSvgByName","unloadSvg","Object","decorators","type","Inject","args","PLATFORM_ID","Optional","DOCUMENT","SVG_ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","SVG_ICON_REGISTRY_PROVIDER","provide","deps","SkipSelf","useFactory","SvgIconComponent","element","differs","renderer","iconReg","cdr","stretch","applyCss","defineProperty","v","_svgStyle","differ","find","create","ngOnInit","init","ngOnDestroy","destroy","ngOnChanges","changeRecord","src","stylize","ngDoCheck","changes","diff","applyChanges","icnSub","subscribe","initSvg","bind","setSvg","resetDiffer","undefined","unsubscribe","icon","cloneNode","elem","nativeElement","copyNgContentAttribute","appendChild","markForCheck","hostElem","attributes","len","length","i","attribute","item","startsWith","setNgContentAttribute","parent","attributeName","setAttribute","childNodes","child","Element","firstChild","removeAttribute","forEachRemovedItem","record","setStyle","key","forEachAddedItem","currentValue","forEachChangedItem","nameAndUnit","value","_a","__read","split","unit","removeStyle","Component","selector","template","ElementRef","KeyValueDiffers","Renderer2","ChangeDetectorRef","Input","AngularSvgIconModule","forRoot","config","ngModule","providers","useClass","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nexport abstract class SvgLoader {\r\n\tabstract getSvg(url: string): Observable<string>;\r\n}\r\n\r\n@Injectable()\r\nexport class SvgHttpLoader extends SvgLoader {\r\n\r\n\tconstructor(private http: HttpClient) {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tgetSvg(url: string): Observable<string> {\r\n\t\treturn this.http.get(url, { responseType: 'text' });\r\n\t}\r\n}\r\n","import { Inject, Injectable, InjectionToken, Optional, PLATFORM_ID, SkipSelf } from '@angular/core';\n\nimport { Observable, of as observableOf, throwError as observableThrowError } from 'rxjs';\nimport { catchError, finalize, map, share, tap } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { SvgLoader } from './svg-loader';\n\nexport const SERVER_URL = new InjectionToken<string>('SERVER_URL');\n\n@Injectable()\nexport class SvgIconRegistryService {\n\n\tprivate document: Document;\n\tprivate iconsByUrl = new Map<string, SVGElement>();\n\tprivate iconsLoadingByUrl = new Map<string, Observable<SVGElement>>();\n\n\tconstructor(\n\t\tprivate loader: SvgLoader,\n\t\t@Inject(PLATFORM_ID) private platformId: Object,\n\t\t@Optional() @Inject(SERVER_URL) protected serverUrl: string,\n\t\t@Optional() @Inject(DOCUMENT) private _document: any) {\n\t\tthis.document = this._document;\n\t}\n\n\t/** Add a SVG to the registry by passing a name and the SVG. */\n\taddSvg(name: string, data: string) {\n\t\tif (!this.iconsByUrl.has(name)) {\n\t\t\tconst div = this.document.createElement('DIV');\n\t\t\tdiv.innerHTML = data;\n\t\t\tconst svg = div.querySelector('svg') as SVGElement;\n\t\t\tthis.iconsByUrl.set(name, svg);\n\t\t}\n\t}\n\n\t/** Load a SVG to the registry from a URL. */\n\tloadSvg(url: string, name: string = url): Observable<SVGElement> {\n\n\t\t// not sure if there should be a possibility to use name for server usage\n\t\t// so overriding it for now if provided\n\t\t// maybe should separate functionality for url and name use-cases\n\t\tif (this.serverUrl && url.match(/^(http(s)?):/) === null) {\n\t\t\turl = this.serverUrl + url;\n\t\t\tname = url;\n\t\t}\n\n\t\tif (this.iconsByUrl.has(name)) {\n\t\t\treturn observableOf(this.iconsByUrl.get(name));\n\t\t} else if (this.iconsLoadingByUrl.has(name)) {\n\t\t\treturn this.iconsLoadingByUrl.get(name);\n\t\t}\n\t\tconst o = this.loader.getSvg(url).pipe(\n\t\t\tmap(svg => {\n\t\t\t\tconst div = this.document.createElement('DIV');\n\t\t\t\tdiv.innerHTML = svg;\n\t\t\t\treturn div.querySelector('svg') as SVGElement;\n\t\t\t}),\n\t\t\ttap (svg => this.iconsByUrl.set(name, svg) ),\n\t\t\tcatchError(err => {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn observableThrowError(err);\n\t\t\t}),\n\t\t\tfinalize(() => this.iconsLoadingByUrl.delete(name) ),\n\t\t\tshare()\n\t\t) as Observable<SVGElement>;\n\n\t\tthis.iconsLoadingByUrl.set(name, o);\n\t\treturn o;\n\t}\n\n\t/** Get loaded SVG from registry by name. (also works by url because of blended map) */\n\tgetSvgByName(name: string): Observable<SVGElement> {\n\t\tif (this.iconsByUrl.has(name)) {\n\t\t\treturn observableOf(this.iconsByUrl.get(name));\n\t\t} else if (this.iconsLoadingByUrl.has(name)) {\n\t\t\treturn this.iconsLoadingByUrl.get(name);\n\t\t}\n\t\treturn observableThrowError(`No svg with name '${name}' has been loaded`);\n\t}\n\n\t/** Remove a SVG from the registry by URL (or name). */\n\tunloadSvg(url: string) {\n\t\tif (this.iconsByUrl.has(url)) {\n\t\t\tthis.iconsByUrl.delete(url);\n\t\t}\n\t}\n}\n\nexport function SVG_ICON_REGISTRY_PROVIDER_FACTORY(\n\t\tparentRegistry: SvgIconRegistryService,\n\t\tloader: SvgLoader,\n\t\tplatformId: object,\n\t\tserverUrl?: string,\n\t\tdocument?: any) {\n\treturn parentRegistry || new SvgIconRegistryService(loader, platformId,  serverUrl, document);\n}\n\nexport const SVG_ICON_REGISTRY_PROVIDER = {\n\tprovide: SvgIconRegistryService,\n\tdeps: [ [new Optional(), new SkipSelf(), SvgIconRegistryService], SvgLoader, [PLATFORM_ID as InjectionToken<any>],\n\t\t\t[new Optional(), SERVER_URL as InjectionToken<string>], [new Optional(), DOCUMENT as InjectionToken<any>]\n\t],\n\tuseFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY\n};\n","import { ChangeDetectorRef, Component, DoCheck, ElementRef, HostBinding, Input,\n\tKeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers,\n\tOnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { SvgIconRegistryService } from './svg-icon-registry.service';\n\n@Component({\n\tselector: 'svg-icon',\n\ttemplate: '<ng-content></ng-content>'\n})\nexport class SvgIconComponent implements OnInit, OnDestroy, OnChanges, DoCheck {\n\t@Input() src: string;\n\t@Input() name: string;\n\t@Input() stretch = false;\n\t@Input() applyCss = false;\n\n\t// Adapted from ngStyle\n\t@Input()\n\tset svgStyle(v: {[key: string]: string }) {\n\t\tthis._svgStyle = v;\n\t\tif (!this.differ && v) {\n\t\t\tthis.differ = this.differs.find(v).create();\n\t\t}\n\t}\n\n\tprivate svg: SVGElement;\n\tprivate icnSub: Subscription;\n\tprivate differ: KeyValueDiffer<string, string|number>;\n\tprivate _svgStyle: {[key: string]: string};\n\n\tconstructor(\n\t\tprivate element: ElementRef,\n\t\tprivate differs: KeyValueDiffers,\n\t\tprivate renderer: Renderer2,\n\t\tprivate iconReg: SvgIconRegistryService,\n\t\tprivate cdr: ChangeDetectorRef) {\n\t}\n\n\tngOnInit() {\n\t\tthis.init();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.destroy();\n\t}\n\n\tngOnChanges(changeRecord: SimpleChanges) {\n\t\tif (changeRecord.src || changeRecord.name) {\n\t\t\tif (this.svg) {\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\tthis.init();\n\t\t}\n\t\tif (changeRecord.stretch) {\n\t\t\tthis.stylize();\n\t\t}\n\t}\n\n\tngDoCheck() {\n\t\tif (this.svg && this.differ) {\n\t\t\tconst changes = this.differ.diff(this._svgStyle);\n\t\t\tif (changes) {\n\t\t\t\tthis.applyChanges(changes);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate init() {\n\t\tif (this.name) {\n\t\t\tthis.icnSub = this.iconReg.getSvgByName(this.name).subscribe(this.initSvg.bind(this));\n\t\t} else if (this.src) {\n\t\t\tthis.icnSub = this.iconReg.loadSvg(this.src).subscribe(this.initSvg.bind(this));\n\t\t}\n\t}\n\n\tprivate initSvg(svg: SVGElement): void {\n\t\tthis.setSvg(svg);\n\t\tthis.resetDiffer();\n\t}\n\n\tprivate destroy() {\n\t\tthis.svg = undefined;\n\t\tthis.differ = undefined;\n\t\tif (this.icnSub) {\n\t\t\tthis.icnSub.unsubscribe();\n\t\t}\n\t}\n\n\tprivate resetDiffer() {\n\t\tif (this._svgStyle && !this.differ) {\n\t\t\tthis.differ = this.differs.find(this._svgStyle).create();\n\t\t}\n\t}\n\n\tprivate setSvg(svg: SVGElement) {\n\t\tif (svg) {\n\t\t\tthis.svg = svg;\n\t\t\tconst icon = svg.cloneNode(true) as SVGElement;\n\t\t\tconst elem = this.element.nativeElement;\n\n\t\t\tif (this.applyCss) {\n\t\t\t\tthis.copyNgContentAttribute(elem, icon);\n\t\t\t}\n\n\t\t\telem.innerHTML = '';\n\t\t\tthis.renderer.appendChild(elem, icon);\n\n\t\t\tthis.stylize();\n\t\t\tthis.cdr.markForCheck();\n\t\t}\n\t}\n\n\tprivate copyNgContentAttribute(hostElem: any, icon: SVGElement) {\n\t\tconst attributes = hostElem.attributes as NamedNodeMap;\n\t\tconst len = attributes.length;\n\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\tconst attribute = attributes.item(i);\n\t\t\tif (attribute.name.startsWith('_ngcontent')) {\n\t\t\t\tthis.setNgContentAttribute(icon, attribute.name);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setNgContentAttribute(parent: Node, attributeName: string) {\n\t\tthis.renderer.setAttribute(parent, attributeName, '');\n\t\tconst len = parent.childNodes.length;\n\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\tconst child = parent.childNodes[i];\n\t\t\tif (child instanceof Element) {\n\t\t\t\tthis.setNgContentAttribute(child, attributeName);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate stylize() {\n\t\tif (this.svg) {\n\t\t\tconst svg = this.element.nativeElement.firstChild;\n\n\t\t\tif (this.stretch === true) {\n\t\t\t\tthis.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');\n\t\t\t} else if (this.stretch === false) {\n\t\t\t\tthis.renderer.removeAttribute(svg, 'preserveAspectRatio');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate applyChanges(changes: KeyValueChanges<string, string|number>) {\n\t\tchanges.forEachRemovedItem((record: KeyValueChangeRecord<string, string|number>) => this.setStyle(record.key, null));\n\t\tchanges.forEachAddedItem((record: KeyValueChangeRecord<string, string|number>) => this.setStyle(record.key, record.currentValue));\n\t\tchanges.forEachChangedItem((record: KeyValueChangeRecord<string, string|number>) => this.setStyle(record.key, record.currentValue));\n\t}\n\n\tprivate setStyle(nameAndUnit: string, value: string|number|null|undefined) {\n\t\tconst [name, unit] = nameAndUnit.split('.');\n\t\tvalue = value !== null && unit ? `${value}${unit}` : value;\n\t\tconst svg = this.element.nativeElement.firstChild;\n\n\t\tif (value !== null) {\n\t\t\tthis.renderer.setStyle(svg, name, value as string);\n\t\t} else {\n\t\t\tthis.renderer.removeStyle(svg, name);\n\t\t}\n\t}\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SVG_ICON_REGISTRY_PROVIDER } from './svg-icon-registry.service';\nimport { SvgIconComponent } from './svg-icon.component';\nimport { SvgHttpLoader, SvgLoader } from './svg-loader';\n\nexport interface AngularSvgIconConfig {\n\tloader?: Provider;\n}\n\n@NgModule({\n\timports:\t  [\n\t\tCommonModule,\n\t],\n\tdeclarations: [ SvgIconComponent ],\n\tproviders:    [ SVG_ICON_REGISTRY_PROVIDER, { provide: SvgLoader, useClass: SvgHttpLoader } ],\n\texports:      [ SvgIconComponent ]\n})\nexport class AngularSvgIconModule {\n\n\tstatic forRoot(config: AngularSvgIconConfig = {}): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: AngularSvgIconModule,\n\t\t\tproviders: [\n\t\t\t\tconfig.loader || { provide: SvgLoader, useClass: SvgHttpLoader },\n\t\t\t\tSVG_ICON_REGISTRY_PROVIDER\n\t\t\t]\n\t\t};\n\t}\n}\n"]}